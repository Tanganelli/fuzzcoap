import code
import re
from collections import OrderedDict
import StringIO
import os, shlex, subprocess

from scapy.all import *
from scapy.contrib.coap import *

from pygdbmi.gdbcontroller import GdbController, GdbTimeoutError

from utils import *

PACKETS = True
if PACKETS:
    LOWER_BOUND_FOR_PACKET_TRY_ALL = 0

    if not TARGET_IPV6:
        conf.L3socket = L3RawSocket

    def demote(user_uid, user_gid):
        def result():
            os.setgid(1000)
            os.setuid(1000)
        return result

    TIME_TO_REPRODUCE = 0.00005
    TIME_TO_HEARTBEAT = 1
    LIBCOAP_HEARTBEAT = False
    RETRY_HEARTBEAT = 3

    #target_env = os.environ.copy()
    #target_env.update({'GOPATH': "/home/bruno/Dropbox/coap-apps/go", 'LD_LIBRARY_PATH': "/home/bruno/coap-apps/go/src/github.com/zubairhamed/canopus/openssl/"})

    SUT_START_COMMAND = "/home/bruno/coap-apps/nning_david/bin/rackup /home/bruno/coap-apps/nning_david/config.ru"

    args = shlex.split(SUT_START_COMMAND)

    sut_log = open('temp_sut_output.log', 'w+b')
    sut = subprocess.Popen(args, preexec_fn=demote(1000, 1000), stdout=sut_log, stderr=subprocess.STDOUT)#, env=target_env)

    reproduced_data = []
#>>> for rep_data in reproduced_data:
#...   print rep_data[0] + '\n\n' + rep_data[1]
#...   print '\n'.join(rep_data[1].split('\n')[-10:])
#...   raw_input("Next")
    stop_all = False

def heartbeat(heartbeat_path):
    if LIBCOAP_HEARTBEAT:
        for i in range(RETRY_HEARTBEAT):
            resp = subprocess.check_output(["coap-client", "-B", str(TIME_TO_HEARTBEAT * (i+1)), "-v", "7", "-m", "get", "coap://localhost/.well-known/core"], preexec_fn=demote(1000, 1000))
            if 'response' in resp:
                return True
    else:
        # .well-known/core should work since that, even if the target doesn't support discovery, it should answer 4.04 Not Found
        if not TARGET_IPV6:
            resp = sr1(IP(dst=COAP_AUT_DEFAULT_DST_HOST)/UDP(sport=COAP_AUT_DEFAULT_SRC_PORT, dport=COAP_AUT_DEFAULT_DST_PORT)/CoAP(type=0, code=1, options=heartbeat_path), timeout=TIME_TO_HEARTBEAT, verbose=0)
        else:
            resp = sr1(IPv6(dst=COAP_AUT_DEFAULT_DST_HOST)/UDP(sport=COAP_AUT_DEFAULT_SRC_PORT, dport=COAP_AUT_DEFAULT_DST_PORT)/CoAP(type=0, code=1, options=heartbeat_path), timeout=TIME_TO_HEARTBEAT, verbose=0)
        if resp and ('IPerror' not in resp):
            # Response actually came from target, and not from IP stack (ICMP error dest/port unreachable)
            return True
    return False

##################################################################################################
# Process target.log
##################################################################################################

def process_target_log_tc(tc_report, target_report, cdcsv, target_name, full=False):
    my_key = None

    internal = bool(next((tc_report.index(s) for s in tc_report if 'process_monitor_unix.py' in s), None))

    if internal:
        return 0

    elif target_name in ['coapthon-plugtest', 'coapthon-server', 'openwsn-server']:
        if full:
            tcb_i = next((tc_report.index(s) for s in tc_report if 'Traceback' in s), None)
        if len(tc_report) >= 5 and ( ('Traceback' in tc_report[1]) or (full and tcb_i >= 0) ):
            tc_no = re.search(r'\((\d+)\)', tc_report[0]).group(1)

            try:
                file_name_i = next((tc_report.index(s) for s in reversed(tc_report) if 'File "' in s), None)
                # TODO: The following indexes from tc_report may vary due to stacktrace depth
                file_name = re.search(r'"(.*?)", line (\d+)', tc_report[file_name_i]).group(1) #-3
                line_no = re.search(r'"(.*?)", line (\d+)', tc_report[file_name_i]).group(2) #-3
                full_exception = tc_report[file_name_i+2] #-1
                exception_name = re.search(r'^(.*?):', full_exception).group(1) if ':' in full_exception else full_exception.split()[0] #-1

                my_key = file_name+':'+line_no+':'+exception_name
            except:
                internal = bool(next((tc_report.index(s) for s in tc_report if 'process_monitor_unix.py' in s), None))
                if not internal:
                    print "Problem processing TC %s" % tc_no
                return -1

    elif target_name in ['jcoap-server', 'jcoap-plugtest']:
        if full:
            tcb_i = next((tc_report.index(s) for s in tc_report if 'Exception' in s), None)
        if len(tc_report) >= 4 and ( ('Exception' in tc_report[1]) or (full and tcb_i >= 0) ):
            tc_no = re.search(r'\((\d+)\)', tc_report[0]).group(1)

            try:
                file_name = re.search(r'at (.*?)\((.*?)\:(\d+)\)', tc_report[tcb_i+1]).group(2)
                line_no = re.search(r'at (.*?)\((.*?)\:(\d+)\)', tc_report[tcb_i+1]).group(3)
                full_exception = "%s [%s] %s" % (' '.join(tc_report[tcb_i-1].split()[3:]) if ' '.join(tc_report[tcb_i-1].split()[3:]) else ' '.join(tc_report[tcb_i].split()[5:]),
                    tc_report[tcb_i].split()[-1], tc_report[tcb_i+1].strip())
                exception_name = tc_report[tcb_i].split()[4].strip(':')

                my_key = file_name+':'+line_no+':'+exception_name
            except:
                internal = bool(next((tc_report.index(s) for s in tc_report if 'process_monitor_unix.py' in s), None))
                if not internal:
                    print "Problem processing TC %s" % tc_no
                return -1

    elif target_name in ['ibm-crosscoap-proxy']:
        if full:
            tcb_i = next((tc_report.index(s) for s in tc_report if 'panic' in s), None)
        if len(tc_report) >= 7 and ( ('panic' in tc_report[1]) or (full and tcb_i >= 0) ):
            tc_no = re.search(r'\((\d+)\)', tc_report[0]).group(1)

            try:
                file_name = re.search(r'(.*?)\:(\d+)', tc_report[tcb_i+7]).group(1).strip()
                line_no = re.search(r'(.*?)\:(\d+)', tc_report[tcb_i+7]).group(2)
                full_exception = "%s %s" % (tc_report[tcb_i].replace(':', ' -')[8:].replace('\n', ''), tc_report[tcb_i+1])
                exception_name = tc_report[tcb_i].replace(':', ' -')[8:]

                my_key = file_name+':'+line_no+':'+exception_name
            except:
                internal = bool(next((tc_report.index(s) for s in tc_report if 'process_monitor_unix.py' in s), None))
                if not internal:
                    print "Problem processing TC %s" % tc_no
                return -1

    else:
        print "Target Unknown"
        exit(-2)

    if my_key is not None:
        try:
            target_report[my_key].append(tc_no)
        except KeyError:
            target_report[my_key] = []
            target_report[my_key].append(tc_no)

        cdcsv.write( "%s\t%s\t%s\t%s\n" % (tc_no, my_key.strip('\n'), exception_name.strip('\n'), full_exception.strip('\n')) )

def get_report(target_report):
    d = OrderedDict(sorted(target_report.items(), key=lambda t: t[0]))

    return Table(
        Column( "File Name",            [ k.split(':')[0] for k in d.keys() ] + ["Total", "Unique"], align=ALIGN.LEFT ),
        Column( "Line #",               [ k.split(':')[1] for k in d.keys() ] + ['', '']),
        Column( "Exception/Function",   [ k.split(':')[2] for k in d.keys() ] + ['', ''], align=ALIGN.LEFT ),
        Column( "Failed TCs",           map(len, d.values()) + [ sum(map(len, d.values())), len(d.keys()) ] )
    )

def process_target_log(target_logfile=None, target_report={}, full=False):
    if 'target.log' not in target_logfile:
        target_logfile = target_logfile + '/target.log'

    target_info = get_target_info_from_filename(target_logfile)

    cdcsv = open('%s/%s/%s/cd.csv' % (target_logfile.split('/')[0], target_info['target_name'], target_info['run_id']), 'w')
    target_report = {}

    with open(target_logfile) as f:
        pos = 0
        while True:
            line = f.readline()
            if 'pre_send(' in line:
                tc_report = [line]
                while True:
                    pos = f.tell()
                    line = f.readline()
                    if 'pre_send(' in line or line == '':
                        break
                    tc_report.append(line)
                process_target_log_tc(tc_report, target_report, cdcsv, target_info['target_name'], full)
                f.seek(pos)
            elif line == '':
                break

    table_report = get_report(target_report)
    print table_report
    with open('%s/%s/%s/cd_summary.log' % (target_logfile.split('/')[0], target_info['target_name'], target_info['run_id']), 'w') as f:
        f.write(str(table_report))
    cdcsv.close()

##################################################################################################
# Process crashlist.log
##################################################################################################

def process_crashlist_log_tc(tc_no, target_report, cdcsv, base_folder, target_name, run_id, bin_file):
    """Debug an application's core dump file programatically

    For a list of GDB MI commands, see https://www.sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html
    """

    if target_name in ['libcoap-server', 'libnyoci-plugtest', 'riot-native-gcoap-server', 'riot-native-nanocoap-server']:
        # Initialize object that manages gdb subprocess
        gdbmi = GdbController()

        # Send gdb commands. Gdb machine interface commands are easier to script around,
        # hence the name "machine interface".
        # Responses are returned after writing, by default.

        # Load the executable file
        responses = gdbmi.write('-file-exec-and-symbols %s' % bin_file, timeout_sec=5)
        # Get list of source files used to compile the binary
        #responses = gdbmi.write('-file-list-exec-source-files')
        # Read core file
        while True:
            try:
                responses = gdbmi.write('core %s/%s/%s/TC_%s.dump' % (base_folder, target_name, run_id, tc_no), timeout_sec=5)
            except GdbTimeoutError:
                print "retrying due to timeout when opening core file for tc %s" % tc_no
                continue
            break
        # Get information from the selected (default=inner-most (0)) stack frame
        # TODO: For some reason, responses seems to have a delay or something like that
        while not (len(responses) == 1 and responses[0]['type'] == 'result' and responses[0]['payload'] is not None):
            responses = gdbmi.write('-stack-info-frame', timeout_sec=5)
        # List variable's names, types and values from the selected stack frame
        #responses = gdbmi.write('-stack-list-variables 2')

        gdbmi.exit()
        gdbmi.exit()
        gdbmi.exit()
        # gdbmi.gdb_process is None now because the gdb subprocess (and its inferior
        # program) have been terminated

        try:
            file_name = responses[0]['payload']['frame']['fullname']
            function_name = responses[0]['payload']['frame']['func']
            line_no = responses[0]['payload']['frame']['line']

            my_key = file_name+':'+line_no+':'+function_name
        except:
            print "Problem processing TC %s" % tc_no
            return -1

        try:
            target_report[my_key].append(tc_no)
        except KeyError:
            target_report[my_key] = []
            target_report[my_key].append(tc_no)

        cdcsv.write( "%s\t%s\t%s\n" % (tc_no, my_key.strip('\n'), function_name.strip('\n')) )

def process_crashlist_log(crashlist_logfile=None, target_report={}):
    if 'crashlist.log' not in crashlist_logfile:
        crashlist_logfile = crashlist_logfile + '/crashlist.log'
    target_info = get_target_info_from_filename(crashlist_logfile)

    cdcsv = open('%s/%s/%s/cd.csv' % (crashlist_logfile.split('/')[0], target_info['target_name'], target_info['run_id']), 'w')
    target_report = {}

    with open(crashlist_logfile) as f:
        for line in f:
            process_crashlist_log_tc(line.split()[5], target_report, cdcsv, crashlist_logfile.split('/')[0], target_info['target_name'], target_info['run_id'], target_info['bin_file'])

    table_report = get_report(target_report)
    print table_report
    with open('%s/%s/%s/cd_summary.csv' % (crashlist_logfile.split('/')[0], target_info['target_name'], target_info['run_id']), 'w') as f:
        f.write(str(table_report))
    cdcsv.close()

##################################################################################################
# Process packets.log
##################################################################################################

def reproduce_crash(strpkt, tc_pkt, heartbeat_path, try_all):
    print "With TC: %d" % tc_pkt
    #print strpkt

    io_pkt = StringIO.StringIO(strpkt)
    sys.stdin = io_pkt
#    pkt = CoAP(import_hexcap())
    pkt = Raw(load=import_hexcap())
    sys.stdin = sys.__stdin__

#    pkt.show()

    if not TARGET_IPV6:
        resp = sr1(IP(dst=COAP_AUT_DEFAULT_DST_HOST)/UDP(sport=COAP_AUT_DEFAULT_SRC_PORT, dport=COAP_AUT_DEFAULT_DST_PORT)/pkt, verbose=0, timeout=TIME_TO_REPRODUCE)
    else:
        resp = sr1(IPv6(dst=COAP_AUT_DEFAULT_DST_HOST)/UDP(sport=COAP_AUT_DEFAULT_SRC_PORT, dport=COAP_AUT_DEFAULT_DST_PORT)/pkt, verbose=0, timeout=TIME_TO_REPRODUCE)

    if try_all:
        return False
    else:
        if not resp:
            resp = heartbeat(heartbeat_path)

        if resp:
            print "Target OK"
        else:
            print "Target Crashed"
            raw_input('Continue?')

        return not resp # False

def process_packets_log_tc(pktlog, heartbeat_path, try_all):
    global sut, sut_log, reproduced_data, stop_all
    reproduced = False
    tc_no = pktlog[0].split()[-1]
    if int(tc_no) > LOWER_BOUND_FOR_PACKET_TRY_ALL:
        print "Reproducing crash detected on TC: %s" % tc_no

        # Try to reproduce through the "Current Unanswered Packets"
        n_unans = int(pktlog[1].split()[-1])
        j = 2
        for i in xrange(n_unans):
            if not reproduced:
                tc_pkt = int(pktlog[j].split()[-1])
                j += 1
                str_pkt = ''
                while ( j < len(pktlog) ) and ( pktlog[j] != 'PACKET_MARK\n' ):
                    str_pkt += pktlog[j]
                    j += 1
                j += 1
                reproduced = reproduce_crash(str_pkt, tc_pkt, heartbeat_path, try_all)

        # Try to reproduce through the "Last Packets sent to URI/Resource"
        if not reproduced and ( j < len(pktlog) ):
            try:
                n_last_uri = int(pktlog[j].split()[-1])
            except ValueError:
                n_last_uri = 0
            j += 1
            for i in xrange(n_last_uri):
                if not reproduced:
                    tc_pkt = int(pktlog[j].split()[-1])
                    j += 1
                    str_pkt = ''
                    while ( j < len(pktlog) ) and ( pktlog[j] != 'PACKET_MARK\n' ):
                        str_pkt += pktlog[j]
                        j += 1
                    j += 1
                    reproduced = reproduce_crash(str_pkt, tc_pkt, heartbeat_path, try_all)

        if try_all:
            if not heartbeat(heartbeat_path):
                reproduced = True
                sut_log.seek(0)
                recent_log = sut_log.read()
                reproduced_data.append((tc_no, recent_log))
                print "################################################ Target Crashed for TC: %s" % tc_no
                sut.kill()
                sut_log = open('temp_sut_output.log', 'w+b')
                sut = subprocess.Popen(args, preexec_fn=demote(1000, 1000), stdout=sut_log, stderr=subprocess.STDOUT)#, env=target_env)
                time.sleep(1)
                if "message.rb:155" in recent_log:
                    stop_all = True
                #raw_input('Continue?')
            else:
                print "Target OK"

    else:
        print "Skipping TC: %s" % tc_no

    return reproduced, int(tc_no)

def process_packets_log(packets_logfile=None):
    if 'packets.log' not in packets_logfile:
        packets_logfile = packets_logfile + '/packets.log'
    RELEVANT_TC_LIST = [1, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 2052, 2055, 2056, 2058, 2059, 2061, 2062, 2063, 2064, 2067, 2068, 2069, 2071, 2076, 2077, 2078, 2079, 2080, 2087, 2088, 2090, 2091, 2093, 2094, 2095, 2096, 2097, 2103, 2105, 2112, 2123, 2124, 2127, 2138, 2147, 2153, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3669, 3670, 3671, 3672, 3675, 3677, 3678, 3679, 3681, 3682, 3683, 3685, 3688, 3690, 3691, 3692, 3693, 3695, 3696, 3697, 3698, 3699, 3701, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3732, 3734, 3741, 3744, 3756, 3759, 3812, 3818, 3827, 3840, 3850, 3855, 3862, 3873, 3878, 3884, 3892, 3893, 3895, 3900, 3903, 3922, 3932, 3938, 3939, 3949, 3950, 3960, 3976, 3977, 3978, 3992, 4011, 4013, 4020, 4035, 4040, 4043, 4058, 4064, 4065, 4069, 4071, 4076, 4080, 4083, 4089, 4090, 4094, 4099, 4110, 4113, 4118, 4126, 4130, 4133, 4138, 4149, 4154, 4155, 4165, 4167, 4171, 4174, 4178, 4184, 4185, 4190, 4194, 4207, 4214, 4219, 4232, 4233, 4257, 4259, 4712, 4726, 4731, 4740, 4753, 4757, 4760, 4761, 4779, 4798, 4812, 4813, 4816, 4817, 4831, 4842, 4850, 4854, 4859, 4888, 4928, 4930, 4948, 4949, 4954, 4960, 4962, 4965, 4975, 4979, 4981, 5004, 5014, 5056, 5060, 5065, 5078, 5101, 5107, 5135, 5141, 5152, 5157, 5170, 5179, 5180, 5182, 5184, 5185, 5188, 5195, 5200, 8389, 8391, 8392, 8400, 8416, 8420, 8431, 8436, 8452, 8455, 8457, 8463, 8470, 8471, 8473, 8476, 8485, 8499, 8505, 8537, 8568, 8577, 8578, 8610, 8611, 8634, 8640, 8641, 8648, 8677, 8679, 8683, 8698, 8708, 8712, 8714, 8717, 8728, 8736, 8742, 8746, 8749, 8750, 8756, 8768, 8776, 8781, 8783, 8798, 8808, 8816, 8829, 8830, 8837, 8845, 8847, 8854, 8856, 11332, 11333, 11336, 11339, 11342, 11343, 11344, 11345, 11346, 11348, 11349, 11354, 11356, 11358, 11359, 11361, 11363, 11367, 11368, 11372, 11373, 11375, 11377, 11378, 11380, 11381, 11395, 11398, 11489, 11494, 11498, 11501, 11503, 11508, 11518, 11535, 11559, 11574, 11577, 11583, 11585, 11587, 11594, 11616, 11630, 11641, 11647, 11654, 11670, 11689, 11695, 11710, 11721, 11725, 11729, 11751, 11753, 11770, 11773, 11774, 11778, 11786, 11798, 11824, 11826, 11836, 11841, 11844, 11856, 11859, 11871, 11874, 11889, 11892, 11915, 11920, 12382, 12384, 12389, 12403, 12414, 12416, 12428, 12430, 12431, 12438, 12451, 12454, 12455, 12461, 12463, 12473, 12479, 12485, 12498, 12516, 12518, 12520, 12531, 12541, 12543, 12548, 12550, 12552, 12557, 12587, 12590, 12595, 12603, 12611, 12614, 12615, 12631, 12637, 12648, 12650, 12653, 12660, 12665, 12675, 12678, 12688, 12694, 12710, 12724, 12729, 12742, 12744, 12760, 12763, 12772, 12778, 12780, 12791, 12793, 12798, 12800, 12815, 12817, 12820, 12824, 12826, 12829, 12832, 12838, 12862, 12876, 12885, 12887, 12900, 12906, 12908, 12920, 12939, 12948, 12997, 13004, 13009, 13034, 13061, 13078, 13095, 13148, 13180, 13184, 13214, 13215, 13231, 13237, 13241, 13242, 13252, 13259, 13311, 13323, 13328, 13336, 13338, 13360, 13367, 13370, 13376, 13378, 13422, 13446, 13448, 13488, 13491, 13498, 13499, 13519, 13532, 13539, 13558, 13568, 13595, 13616, 13648, 13671, 13695, 13713, 13725, 13752, 13780, 13792, 13796, 13797, 13799, 13802, 13806, 13807, 13808, 13810, 13811, 13812, 13813, 13820, 13821, 13822, 13823, 13824, 13827, 13830, 13831, 13833, 13835, 13836, 13838, 13840, 13841, 13856, 13863, 13877, 13880, 13883, 13968, 13974, 13978, 13985, 13987, 13988, 13996, 14006, 14013, 14015, 14019, 14021, 14024, 14026, 14028, 14039, 14054, 14057, 14061, 14064, 14073, 14079, 14089, 14125, 14138, 14139, 14142, 14160, 14162, 14165, 14166, 14168, 14171, 14180, 14185, 14195, 14203, 14209, 14218, 14254, 14260, 14267, 14270, 14272, 14275, 14285, 14291, 14299, 14307, 14316, 14323, 14341, 14345, 14347, 14350, 14351, 14352, 14361, 14371, 14376, 14377, 14379, 14390, 14852, 14857, 14860, 14862, 14870, 14894, 14897, 14901, 14905, 14912, 14914, 14927, 14932, 14937, 14946, 14956, 14957, 14962, 14972, 14975, 14981, 14982, 14989, 14995, 15012, 15013, 15021, 15024, 15033, 15039, 15055, 15065, 15071, 15079, 15082, 15089, 15093, 15097, 15115, 15117, 15136, 15142, 15144, 15151, 15152, 15164, 15168, 15170, 15174, 15181, 15190, 15193, 15197, 15202, 15209, 15211, 15233, 15236, 15254, 15257, 15261, 15262, 15263, 15265, 15271, 15276, 15282, 15283, 15285, 15289, 15295, 15301, 15309, 17365, 17371, 17376, 17380, 17383, 17385, 17406, 17415, 17417, 17427, 17428, 17433, 17477, 17482, 17484, 17486, 17509, 17521, 17529, 17537, 17538, 17542, 17545, 17569, 17570, 17575, 17580, 17583, 17593, 17609, 17622, 17628, 17654, 17659, 17679, 17714, 17717, 17722, 17740, 17748, 17757, 17778, 17784, 17793, 17817, 17828, 17832, 17843, 19387, 19388, 19389, 19391, 19393, 19396, 19397, 19398, 19400, 19401, 19402, 19403, 19407, 19408, 19409, 19411, 19412, 19413, 19414, 19415, 19420, 19421, 19423, 19425, 19426, 19429, 19430, 19431, 19441, 19458, 19479, 19481, 19516, 19545, 19551, 19570, 19575, 19576, 19577, 19585, 19598, 19602, 19625, 19630, 19640, 19643, 19654, 19681, 19702, 19705, 19706, 19710, 19741, 19749, 19770, 19783, 19787, 19792, 19798, 19815, 19821, 19834, 19837, 19839, 19865, 19870, 19897, 19899, 19913, 19915, 19917, 19929, 19934, 19935, 19942, 19947, 19959, 19960, 19961, 19965, 19981, 19983, 20091, 20095, 20096, 20106, 20226, 20237, 20247, 20249, 20251, 20255, 20260, 20276, 20278, 20414, 20430, 20448, 20474, 20475, 20479, 20487, 20490, 20502, 20503, 20544, 20545, 20546, 20547, 20548, 20549, 20553, 20554, 20555, 20559, 20561, 20563, 20565, 20566, 20567, 20568, 20570, 20572, 20575, 20576, 20577, 20578, 20579, 20581, 20584, 20589, 20591, 20593, 20601, 20603, 20617, 20619, 20628, 20630, 20696, 20697, 20698, 20702, 20719, 20723, 20724, 20725, 20739, 20742, 20743, 20745, 20754, 20756, 20769, 20771, 20773, 20776, 20789, 20792, 20793, 20797, 20811, 20818, 20822, 20833, 20835, 20842, 20845, 20851, 20853, 20865, 20881, 20883, 20899, 20917, 20921, 20922, 20931, 20932, 20969, 20995, 21003, 21009, 21011, 21014, 21017, 21033, 21044, 21057, 21072, 21081, 21082, 21087, 21088, 21089, 21092, 21095, 21096, 21108, 21109, 21116, 21117, 21121, 21126, 21129, 21134, 21517, 21597, 21598, 21603, 21605, 21613, 21617, 21621, 21630, 21634, 21655, 21659, 21665, 21669, 21676, 21681, 21701, 21704, 21724, 21725, 21747, 21750, 21755, 21765, 21767, 21768, 21769, 21786, 21802, 21808, 21815, 21825, 21832, 21840, 21849, 21851, 21852, 21860, 21869, 21896, 21898, 21902, 21917, 21922, 21923, 21924, 21932, 21940, 21946, 21950, 21954, 21955, 21965, 21978, 21992, 22003, 22015, 22016, 22018, 22032, 22034, 22037, 22057, 22063, 22065, 22066, 22068, 22097, 22195, 22946, 22947, 22948, 22949, 22950, 22951, 22952, 22953, 22955, 22958, 22959, 22960, 22961, 22966, 22967, 22968, 22969, 22973, 22974, 22975, 22976, 22977, 22978, 22979, 22980, 22982, 22983, 22984, 22986, 22987, 22989, 22991, 22992, 22993, 22997, 22998, 23001, 23003, 23007, 23011, 23016, 23022, 23029, 23033, 23040, 23042, 23096, 23098, 23101, 23112, 23117, 23118, 23120, 23125, 23132, 23141, 23161, 23180, 23188, 23190, 23198, 23211, 23219, 23223, 23236, 23248, 23252, 23254, 23262, 23281, 23292, 23297, 23298, 23307, 23309, 23313, 23320, 23328, 23345, 23348, 23351, 23352, 23362, 23369, 23374, 23380, 23381, 23394, 23397, 23402, 23413, 23419, 23423, 23428, 23442, 23452, 23455, 23459, 23465, 23476, 23477, 23490, 23494, 23511, 23515, 23517, 23520, 23531, 23536, 23544, 24009, 24014, 24024, 24033, 24034, 24037, 24039, 24041, 24051, 24052, 24072, 24074, 24086, 24087, 24090, 24091, 24094, 24098, 24100, 24102, 24104, 24111, 24122, 24127, 24149, 24155, 24165, 24195, 24196, 24203, 24211, 24215, 24227, 24237, 24239, 24241, 24254, 24256, 24263, 24279, 24280, 24288, 24289, 24291, 24299, 24300, 24304, 24312, 24315, 24320, 24323, 24334, 24359, 24367, 24369, 24372, 24378, 24379, 24384, 24395, 24404, 24429, 24434, 24436, 24442, 24444, 24456, 24458, 24460, 24624, 24818, 24948, 25079, 25105, 25111, 25116, 25117, 25131, 25150, 25160, 25164, 25165, 25169, 25175, 25177, 25181, 25184, 25186, 25192, 25196, 25205, 25209, 25219, 25224, 25227, 25245, 25247, 25273, 25282, 25287, 25300, 25306, 25317, 25327, 25331, 25332, 25334, 25337, 25346, 25350, 25352, 25354, 25359, 25360, 25370, 25375, 25380, 25386, 25390, 25403, 25406, 25419, 25430, 25437, 25442, 25461, 25466, 25469, 25475, 25487, 25493, 25545, 25548, 25556, 26615, 26639, 26795, 26975, 27047, 27071, 27227, 27335, 27407, 27431, 27515, 28439, 28667, 28739, 28883, 29207, 29567, 30959, 30971, 30995, 31115, 31139, 31583, 31655, 31679, 31859, 31895, 32039, 32041, 32042, 32043, 32045, 32046, 32047, 32110, 32117, 32122, 32128, 32137, 32142, 32143, 32152, 32154, 32161, 32169, 32172, 32184, 32195, 32663, 32667, 32676, 32678, 32699, 32701, 32705, 32707, 32711, 32713, 32715, 32734, 32739, 32742, 32759, 32761, 32769, 32770, 32774, 32802, 32805, 32818, 32825, 32858, 32871, 32900, 32903, 32923, 32947, 32961, 32962, 32963, 32965, 32966, 32967, 32972, 32975, 32978, 32980, 32981, 32987, 32989, 32990, 32991, 32993, 32995, 32997, 32998, 33001, 33002, 33003, 33004, 33006, 33007, 33011, 33026, 33042, 33115, 33117, 33128, 33130, 33131, 33132, 33140, 33141, 33142, 33147, 33157, 33170, 33180, 33181, 33187, 33189, 33190, 33206, 33214, 33215, 33219, 33242, 33245, 33252, 33262, 33266, 33271, 33274, 33287, 33289, 33296, 33297, 33300, 33312, 33326, 33328, 33329, 33333, 33335, 33339, 33343, 33348, 33367, 33382, 33383, 33420, 33421, 33432, 33439, 33449, 33472, 33483, 33488, 33490, 33496, 33516, 33522, 33539, 33542, 33554, 34011, 34019, 34020, 34022, 34034, 34045, 34047, 34048, 34056, 34082, 34090, 34094, 34131, 34134, 34138, 34139, 34141, 34142, 34144, 34147, 34150, 34151, 34165, 34177, 34187, 34189, 34215, 34217, 34226, 34228, 34237, 34244, 34245, 34250, 34253, 34268, 34271, 34272, 34283, 34286, 34287, 34291, 34294, 34299, 34309, 34311, 34334, 34345, 34359, 34364, 34365, 34366, 34376, 34392, 34408, 34417, 34423, 34426, 34437, 34439, 34450, 34458, 34460, 34462, 34471, 34476, 34477, 34485, 34488, 34496, 34500, 34503, 54497, 54499, 54500, 54501, 54503, 54504, 54505, 54506, 54507, 54508, 54509, 54513, 54514, 54516, 54519, 54520, 54521, 54522, 54523, 54525, 54526, 54527, 54528, 54531, 54532, 54534, 54535, 54538, 54539, 54542, 54544, 54548, 54551, 54553, 54566, 54569, 54571, 54582, 54594, 54659, 54663, 54674, 54677, 54686, 54698, 54715, 54718, 54725, 54729, 54745, 54747, 54754, 54762, 54775, 54779, 54802, 54804, 54817, 54827, 54829, 54849, 54872, 54876, 54883, 54887, 54901, 54904, 54914, 54925, 54929, 54946, 54948, 54949, 54950, 54963, 54965, 54969, 54971, 54972, 54988, 55012, 55015, 55034, 55039, 55056, 55065, 55072, 55073, 55077, 55080, 55085, 55566, 55580, 55583, 55589, 55594, 55599, 55605, 55614, 55618, 55627, 55644, 55645, 55656, 55710, 55716, 55722, 55729, 55730, 55744, 55751, 55756, 55758, 55759, 55760, 55762, 55775, 55780, 55781, 55785, 55791, 55793, 55804, 55806, 55810, 55812, 55814, 55822, 55823, 55834, 55843, 55852, 55876, 55879, 55883, 55891, 55915, 55934, 55943, 55945, 55949, 55953, 55963, 55973, 55990, 55999, 56009, 56015, 56024, 56618, 56619, 56624, 56633, 56645, 56646, 56647, 56649, 56656, 56658, 56660, 56669, 56694, 56696, 56700, 56715, 56726, 56730, 56733, 56736, 56748, 56756, 56766, 56771, 56781, 56787, 56793, 56794, 56798, 56803, 56809, 56823, 56827, 56841, 56843, 56864, 56880, 56908, 56917, 56918, 56920, 56924, 56934, 56937, 56941, 56954, 56957, 56959, 56962, 56982, 56997, 57000, 57011, 57019, 57035, 57039, 57041, 57056, 57059, 57060, 57063, 57065, 57074, 57079, 57096, 57101, 57106, 57108, 57113, 58388, 58392, 58393, 58394, 58395, 58396, 58397, 58399, 58400, 58460, 58462, 58467, 58470, 58480, 58481, 58483, 58485, 58486, 58491, 58496, 58506, 58520, 58521, 58537, 58540, 58545, 58552, 59019, 59029, 59035, 59042, 59067, 59072, 59075, 59082, 59084, 59085, 59090, 59091, 59187, 59188, 59192, 59197, 59198, 59200, 59202, 59203, 59205, 59206, 59208, 59210, 59217, 59219, 59220, 59221, 59222, 59223, 59224, 59226, 59227, 59228, 59232, 59233, 59234, 59244, 59263, 59343, 59344, 59345, 59360, 59361, 59372, 59380, 59382, 59396, 59413, 59422, 59428, 59435, 59436, 59458, 59459, 59465, 59488, 59493, 59500, 59511, 59518, 59540, 59549, 59567, 59595, 59598, 59606, 59607, 59608, 59610, 59617, 59625, 59628, 59641, 59654, 59663, 59671, 59688, 59693, 59696, 59697, 59698, 59701, 59712, 59713, 59714, 59722, 59725, 59727, 59746, 59751, 59754, 59772, 60238, 60243, 60245, 60246, 60276, 60284, 60287, 60295, 60301, 60305, 60307, 60312, 60320, 60323, 60326, 60341, 60349, 60350, 60359, 60362, 60373, 60375, 60377, 60387, 60394, 60396, 60398, 60399, 60400, 60412, 60413, 60417, 60418, 60419, 60420, 60422, 60425, 60429, 60432, 60437, 60444, 60445, 60451, 60452, 60459, 60466, 60472, 60489, 60490, 60492, 60494, 60495, 60501, 60506, 60507, 60510, 60518, 60527, 60529, 60530, 60547, 60550, 60554, 60557, 60560, 60577, 60581, 60589, 60597, 60610, 60615, 60622, 60627, 60644, 60650, 60652, 60658, 60661, 60666, 60682, 60690, 60693, 60699, 60725, 60726, 71876, 71895, 71904, 71912, 71915, 71929, 71938, 71940, 71943, 71950, 71965, 71975, 71976, 71979, 71980, 71990, 72008, 72011, 72012, 72015, 72016, 72038, 72040, 72044, 72050, 72052, 72055, 72064, 72066, 72067, 72079, 72083, 72088, 72095, 72116, 72118, 72123, 72124, 72142, 72144, 72151, 72159, 72174, 72181, 72185, 72191, 72208, 72212, 72213, 72217, 72227, 72232, 72233, 72237, 72238, 72245, 72255, 72259, 72274, 72285, 72302, 72308, 72320, 72322, 72324, 72327, 72335, 72355, 72358, 72373, 75505, 75519, 75521, 75524, 75551, 75553, 75556, 75559, 75582, 75584, 75597, 75611, 75613, 75614, 75618, 75622, 75626, 75634, 75641, 75645, 75656, 75662, 75672, 75681, 75711, 75712, 75726, 75740, 75743, 75745, 75749, 75753, 75757, 75765, 75771, 75772, 75774, 75775, 75779, 75780, 75785, 75791, 75796, 75807, 75810, 75812, 75813, 75814, 75817, 75820, 75833, 75862, 75873, 75876, 75877, 75891, 75897, 75898, 75905, 75906, 75908, 75916, 75918, 75923, 75927, 75931, 75954, 75959, 75968, 75976, 84133, 84138, 84139, 84141, 84142, 84144, 84145, 84149, 84150, 84151, 84152, 84153, 84154, 84155, 84156, 84157, 84158, 84160, 84161, 84162, 84163, 84164, 84166, 84169, 84170, 84174, 84179, 84180, 84181, 84198, 84200, 84207, 84221, 84226, 84229, 84230, 84292, 84312, 84321, 84332, 84333, 84342, 84344, 84353, 84374, 84385, 84392, 84394, 84398, 84399, 84403, 84409, 84414, 84419, 84462, 84473, 84474, 84483, 84492, 84507, 84508, 84515, 84530, 84535, 84536, 84539, 84545, 84549, 84571, 84579, 84586, 84600, 84601, 84623, 84630, 84635, 84659, 84669, 84687, 84695, 84702, 84717, 84721, 84729, 84732, 85197, 85202, 85203, 85211, 85214, 85216, 85219, 85221, 85225, 85227, 85241, 85242, 85257, 85258, 85275, 85279, 85285, 85286, 85287, 85303, 85307, 85316, 85321, 85328, 85341, 85350, 85355, 85362, 85366, 85374, 85392, 85396, 85398, 85404, 85408, 85415, 85418, 85432, 85438, 85441, 85452, 85458, 85459, 85479, 85481, 85482, 85500, 85505, 85511, 85515, 85518, 85521, 85522, 85530, 85533, 85559, 85562, 85567, 85569, 85570, 85571, 85596, 85597, 85598, 85599, 85604, 85607, 85609, 85611, 85615, 85617, 85622, 85623, 85624, 85633, 85638, 85652, 85653, 85659, 86274, 86285, 86289, 86293, 86324, 86345, 86346, 86348, 86351, 86367, 86379, 86381, 86383, 86386, 86388, 86390, 86397, 86400, 86404, 86410, 86421, 86422, 86423, 86426, 86438, 86439, 86441, 86443, 86462, 86467, 86470, 86482, 86492, 86498, 86503, 86507, 86514, 86516, 86535, 86539, 86545, 86551, 86554, 86557, 86566, 86574, 86584, 86586, 86597, 86602, 86603, 86616, 86621, 86646, 86647, 86650, 86652, 86658, 86662, 86670, 86674, 86677, 86681, 86690, 86704, 86707, 86740, 86744, 86749, 86752, 88018, 88019, 88020, 88022, 88025, 88033, 88034, 88090, 88098, 88103, 88106, 88117, 88134, 88140, 88146, 88148, 88153, 88163, 88169, 88171, 88172, 88186, 88649, 88691, 88692, 88704, 88706, 88711, 88715, 88719, 88721, 88723, 88727, 88733, 88738, 88741, 94193, 94196, 94197, 94201, 94208, 94210, 94214, 94218, 94220, 94249, 94254, 94261, 94268, 94275, 94277, 94281, 94283, 94285, 94996, 95016, 95027, 95031, 95036, 95051, 95058, 95060, 95064, 95067, 95071, 95073, 95074, 95075, 95076, 95082, 95083, 103429, 103430, 103432, 103433, 103435, 103437, 103438, 103444, 103445, 103446, 103447, 103448, 103449, 103452, 103453, 103455, 103456, 103457, 103461, 103462, 103463, 103465, 103466, 103467, 103470, 103471, 103473, 103475, 103478, 103479, 103494, 103497, 103509, 103511, 103514, 103517, 103526, 103579, 103582, 103592, 103594, 103596, 103597, 103598, 103599, 103601, 103619, 103624, 103628, 103630, 103634, 103637, 103639, 103653, 103661, 103667, 103671, 103689, 103701, 103711, 103722, 103743, 103745, 103759, 103771, 103783, 103790, 103794, 103796, 103798, 103807, 103810, 103814, 103828, 103832, 103840, 103867, 103871, 103876, 103888, 103890, 103891, 103906, 103914, 103916, 103922, 103938, 103941, 103956, 103962, 103966, 103978, 103980, 103982, 103985, 103990, 103995, 103996, 103997, 104000, 104016, 104023, 104027, 104028, 104497, 104498, 104499, 104516, 104517, 104524, 104527, 104530, 104536, 104548, 104551, 104554, 104571, 104585, 104603, 104606, 104609, 104612, 104644, 104645, 104646, 104652, 104667, 104703, 104704, 104708, 104710, 104713, 104721, 104726, 104731, 104759, 104765, 104772, 104773, 104787, 104797, 104801, 104802, 104806, 104807, 104809, 104853, 104867, 104873, 104874, 104890, 104893, 104900, 104905, 104921, 104922, 104945, 105611, 105616, 105628, 105630, 105636, 105640, 105644, 105652, 105655, 105657, 105660, 105672, 105677, 105687, 105690, 105697, 105700, 105701, 105702, 105704, 105722, 105726, 105742, 105749, 105764, 105771, 105774, 105786, 105797, 105799, 105831, 105839, 105847, 105852, 105853, 105875, 105884, 105899, 105903, 105906, 105907, 105921, 105927, 105931, 105934, 105935, 105936, 105942, 105951, 105960, 105966, 105971, 105978, 105984, 105992, 106000, 106016, 106018, 106019, 106020, 106026, 106033, 106041, 106044, 106045, 106055, 106063, 106071, 106074, 106080, 106960, 106964, 106966, 106970, 106973, 106977, 106985, 106992, 107010, 107018, 107028, 107035, 107038, 107053, 107068, 107069, 107079, 107080, 107093, 107097, 107108, 107112, 107113, 107133, 107134, 107135, 107147, 107150, 107154, 107162, 107178, 107179, 107193, 107199, 107211, 107214, 107231, 107252, 107259, 107260, 107261, 107263, 107271, 107276, 107278, 107292, 107307, 107313, 107319, 107322, 107323, 107325, 107327, 107328, 107334, 107335, 107338, 107359, 107369, 107381, 107384, 107389, 107395, 107414, 107420, 107431, 107435, 109152, 109190, 109201, 109202, 109214, 109226, 109234, 109241, 109253, 109262, 109293, 109297, 109299, 109304, 109308, 109346, 109355, 109370, 109384, 109385, 109386, 109389, 109397, 109401, 109415, 109419, 109422, 109426, 109433, 109434, 109449, 109464, 109476, 109487, 109489, 109496, 109509, 109519, 109526, 109537, 109551, 109558, 109560, 109567, 109569, 109579, 109590, 109593, 109603, 109607, 112765, 112766, 112768, 112770, 112771, 112773, 112774, 112776, 112778, 112779, 112780, 112781, 112784, 112785, 112786, 112787, 112788, 112789, 112790, 112792, 112793, 112794, 112795, 112798, 112799, 112802, 112803, 112804, 112805, 112806, 112807, 112808, 112809, 112811, 112812, 112813, 112814, 112821, 112822, 112832, 112836, 112846, 112852, 112854, 112917, 112932, 112936, 112938, 112943, 112949, 112952, 112974, 112978, 112987, 112989, 112992, 112998, 113024, 113026, 113039, 113041, 113055, 113062, 113064, 113075, 113080, 113081, 113088, 113092, 113095, 113096, 113106, 113117, 113131, 113134, 113135, 113141, 113147, 113159, 113174, 113185, 113187, 113192, 113206, 113209, 113210, 113211, 113218, 113225, 113269, 113274, 113275, 113276, 113282, 113288, 113289, 113291, 113294, 113297, 113300, 113319, 113325, 113332, 113334, 113355, 113816, 113834, 113859, 113886, 113888, 113890, 113896, 113905, 113906, 113907, 113932, 113938, 113939, 113946, 113955, 113960, 113962, 113966, 113969, 113971, 113975, 113976, 113981, 113982, 113986, 113991, 113993, 114001, 114013, 114045, 114046, 114062, 114089, 114094, 114096, 114108, 114112, 114115, 114128, 114129, 114138, 114144, 114150, 114154, 114162, 114163, 114165, 114172, 114181, 114186, 114187, 114188, 114191, 114194, 114195, 114200, 114205, 114214, 114226, 114241, 114251, 114254, 114258, 114260, 114263, 114265, 114271, 114298, 114299, 114308, 114966, 114976, 114982, 114983, 114984, 114987, 114992, 115018, 115061, 115067, 115080, 115082, 115101, 115105, 115109, 115111, 115117, 115119, 115132, 115133, 115139, 115148, 115149, 115156, 115162, 115166, 115167, 115168, 115170, 115173, 115174, 115177, 115202, 115208, 115212, 115215, 115216, 115217, 115227, 115236, 115242, 115247, 115248, 115252, 115257, 115258, 115261, 115271, 115272, 115274, 115279, 115290, 115295, 115305, 115323, 115339, 115341, 115343, 115352, 115365, 115368, 115369, 115379, 115380, 115382, 115388, 115398, 115403, 115404, 115414, 116292, 116293, 116296, 116307, 116315, 116317, 116329, 116330, 116338, 116349, 116352, 116355, 116360, 116361, 116387, 116395, 116397, 116404, 116407, 116408, 116409, 116422, 116423, 116427, 116428, 116437, 116456, 116460, 116465, 116467, 116475, 116481, 116482, 116489, 116496, 116503, 116506, 116510, 116516, 116519, 116521, 116523, 116525, 116558, 116562, 116587, 116594, 116596, 116599, 116600, 116603, 116612, 116637, 116642, 116649, 116660, 116665, 116669, 116676, 116682, 116696, 116700, 116715, 116724, 116726, 116733, 116746, 116750, 116765, 116775, 116780, 125428, 125431, 125436, 125441, 125452, 125453, 125454, 125458, 125462, 125497, 125499, 125503, 125510, 125526, 125547, 125557, 125562, 125585, 125586, 125611, 125614, 125624, 125632, 125640, 125649, 125656, 125657, 125667, 125670, 125675, 125680, 125689, 125693, 125710, 125727, 125733, 125742, 125753, 125757, 125774, 125785, 125792, 125806, 125807, 125811, 125830, 125835, 125846, 125854, 125856, 125863, 125871, 125873, 125876, 125906, 125913, 125917, 125920, 125926, 134713, 134714, 134716, 134717, 134718, 134719, 134721, 134722, 134723, 134724, 134727, 134729, 134731, 134733, 134735, 134736, 134740, 134741, 134744, 134745, 134747, 134748, 134750, 134751, 134753, 134755, 134756, 134758, 134760, 134761, 134765, 134767, 134776, 134783, 134793, 134796, 134805, 134867, 134887, 134888, 134892, 134897, 134912, 134913, 134920, 134921, 134925, 134927, 134933, 134935, 134939, 134946, 134947, 134963, 134970, 134998, 135006, 135009, 135010, 135011, 135012, 135017, 135030, 135034, 135038, 135059, 135061, 135063, 135070, 135080, 135083, 135114, 135117, 135124, 135128, 135130, 135131, 135138, 135140, 135147, 135152, 135167, 135171, 135183, 135190, 135193, 135195, 135204, 135208, 135214, 135215, 135217, 135223, 135226, 135237, 135243, 135253, 135254, 135268, 135274, 135278, 135280, 135281, 135286, 135287, 135290, 135299, 135797, 135801, 135809, 135825, 135833, 135843, 135855, 135867, 135876, 135882, 135903, 135908, 135920, 135925, 135937, 135942, 135943, 135946, 135949, 135957, 135967, 135968, 135973, 135975, 135989, 135990, 135991, 135992, 135999, 136018, 136019, 136020, 136021, 136034, 136036, 136039, 136048, 136059, 136066, 136068, 136071, 136074, 136097, 136113, 136119, 136144, 136146, 136149, 136150, 136163, 136170, 136183, 136197, 136203, 136216, 136219, 136224, 136225, 136226, 136231, 137420, 137487, 137496, 137500, 137525, 137567, 137575, 137576, 137580, 137595, 137605, 137609, 137612, 137725, 137826, 137879, 137896, 137901, 137904, 137908, 137913, 137918, 137920, 137922, 137934, 137941, 137942, 137943, 137950, 137953, 137967, 137971, 137989, 137996, 137999, 138003, 138017, 138046, 138850, 138851, 138856, 138858, 138861, 138863, 138864, 138865, 138866, 138868, 138869, 138877, 138879, 138881, 138948, 138949, 138960, 138961, 138967, 138993, 139002, 139010, 139011, 139013, 139026, 139044, 139047, 139056, 139057, 139069, 139072, 139087, 139089, 139091, 139101, 139102, 139109, 139112, 139129, 139131, 139136, 139599, 139622, 139626, 139640, 139658, 139660, 139666, 139670, 139672, 139686, 139689, 139693, 139701, 139702, 139720, 139723, 139740, 139744, 139758, 139761, 139768, 139786, 139788, 139789, 139792, 139795, 141669, 141670, 141671, 141673, 141676, 141679, 141683, 141684, 141685, 141689, 141692, 141693, 141696, 141698, 141699, 141701, 141702, 141704, 141710, 141711, 141713, 141716, 141726, 141728, 141733, 141735, 141736, 141746, 141759, 141764, 141830, 141835, 141853, 141854, 141863, 141865, 141878, 141888, 141903, 141904, 141916, 141925, 141933, 141936, 141952, 141966, 141974, 141981, 141986, 141992, 141997, 142000, 142002, 142005, 142033, 142042, 142062, 142064, 142071, 142075, 142077, 142082, 142094, 142112, 142124, 142128, 142136, 142145, 142164, 142172, 142174, 142177, 142186, 142187, 142189, 142207, 142217, 142219, 142221, 142224, 142226, 142234, 142236, 142239, 142255, 142731, 142742, 142746, 142751, 142752, 142757, 142762, 142764, 142767, 142772, 142799, 142809, 142811, 142813, 142814, 142815, 142818, 142819, 142821, 142823, 142835, 142849, 142860, 142863, 142877, 142878, 142883, 142911, 142912, 142913, 142929, 142931, 142932, 142935, 142936, 142940, 142942, 142957, 142958, 142972, 142982, 142994, 142997, 142998, 142999, 143021, 143029, 143032, 143037, 143044, 143045, 143058, 143060, 143069, 143078, 143081, 143085, 143088, 143092, 143103, 143104, 143123, 143130, 143138, 143166, 143171, 143175, 143186]
    TRY_ALL = True
    already_read_title = False

    target_info = get_target_info_from_filename(packets_logfile)

    last_tc_no = 0
    with open(packets_logfile, 'r') as f:
        while True:
            if stop_all:
                break
            if not already_read_title:
                line = f.readline()
            if line == '':
                break
            try:
                tc_no = int(line.split()[-1])
            except IndexError:
                while ('Crash detected on TC' not in line) and (line != ''):
                    line = f.readline()
                tc_no = int(line.split()[-1])
            if (RELEVANT_TC_LIST and (tc_no in RELEVANT_TC_LIST)) or (not RELEVANT_TC_LIST):
                pktlog = [line]
                while True:
                    line = f.readline()
                    if line == '\n':
                        line = f.readline()
                        if line == '\n':
                            last_tc_no = process_packets_log_tc(pktlog, target_info['heartbeat_path'], TRY_ALL)[1]
                            already_read_title = False
                            break
                        else:
                            pktlog.append("PACKET_MARK\n")
                    pktlog.append(line)
            else:
                line = f.readline()
                while ('Crash detected on TC' not in line) and (line != ''):
                    line = f.readline()
                already_read_title = True

if __name__ == "__main__":
    code.interact( local=dict(globals(), **locals()), banner="CoAP Fuzzer's Log Analyzer v0.5" )
